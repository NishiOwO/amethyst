(defmacro
    while condy
        stat
    &key else
    (loop
        (cond
            (condy stat)
            (:else (break else)))))

(defun fib (n u64) : u64
    (cond   
        ((<= n 1) n)
        (:else (+ (fib (- n 1)) (fib (- n 2))))))

(defun subslice (s (@ mut 'a)) (start u64) (end u64) : (@ mut 'a)
    (slice (- end start) (ptr-add s.ptr start)))

(defun print (str (@ mut u8))
    (seqn
        (syscall 1 1 (cast str.ptr) str.len 0 0 0)))

(defun print-int (i u64)
    (seqn
        (cond
            ((== i 0) (print "0"))
            (:else (seqn
                (let p = (alloca 20))
                (let start = 19)
                (while (!= i 0) (seqn
                    (let c = (+ '0' (cast (% i 10))))
                    (set start = (- start 1))
                    (set (get p start) = c)
                    (set i = (/ i 10))))
                (print (subslice p start (- p.len 1))))))))

(defun main (seqn
    (let fib-40 = (fib 40))
    (print-int fib-40)))
